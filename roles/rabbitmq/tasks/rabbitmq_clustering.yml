---
- name: RabitMQ | stopping rabbitmq app
  command: rabbitmqctl stop_app

- name: RabitMQ | resetting rabbitmq app
  command: rabbitmqctl reset

- name: RabitMQ | stopping rabbitmq-server
  service: name=rabbitmq-server state=stopped

- name: RabitMQ | copy erlang cookie
  template: src=erlang.cookie.j2 dest=/var/lib/rabbitmq/.erlang.cookie owner=rabbitmq group=rabbitmq mode=0400 backup=yes

- name: RabitMQ | restarting rabbitmq-server on master
  service: name=rabbitmq-server state=restarted
  when: inventory_hostname == "{{ groups['rabbit_cluster'][0] }}"

- name: RabitMQ | starting rabbitmq app on master
  command: rabbitmqctl start_app
  register: cluster_master
  when: inventory_hostname == "{{ groups['rabbit_cluster'][0] }}"

- name: RabitMQ | sending sigterm to any running rabbitmq processes
  shell: pkill -u rabbitmq || true
  when: inventory_hostname != "{{ groups['rabbit_cluster'][0] }}"

- name: RabitMQ | restarting rabbitmq-server
  service: name=rabbitmq-server state=restarted
  when: inventory_hostname != "{{ groups['rabbit_cluster'][0] }}"

- name: RabitMQ | stopping rabbitmq app
  command: rabbitmqctl stop_app
  when: inventory_hostname != "{{ groups['rabbit_cluster'][0] }}"

- name: RabitMQ | resetting rabbitmq app
  command: rabbitmqctl reset
  when: inventory_hostname != "{{ groups['rabbit_cluster'][0] }}"

- name: RabitMQ | joining rabbitmq cluster
  command: rabbitmqctl join_cluster 'rabbit@{{ hostvars[groups['rabbit_cluster'][0]]['ansible_hostname'] }}'
  register: cluster_joined
  when: inventory_hostname != "{{ groups['rabbit_cluster'][0] }}"

- name: RabitMQ | starting rabbitmq app
  command: rabbitmqctl start_app
  when: inventory_hostname != "{{ groups['rabbit_cluster'][0] }}"

- name: RabitMQ | marking as clustered
  file: path=/etc/rabbitmq/clustered state=touch
  when: cluster_master.changed or cluster_joined.changed